<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TV Shows</title>
    <style>
        /* Styles for the modal */
        .modal {
            display: none; /* Hidden by default */
            position: fixed; /* Stay in place */
            z-index: 1; /* Sit on top */
            left: 0;
            top: 0;
            width: 100%; /* Full width */
            height: 100%; /* Full height */
            overflow: auto; /* Enable scroll if needed */
            background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
        }

        .modal-content {
            background-color: #fefefe;
            margin: 15% auto; /* 15% from the top and centered */
            padding: 20px;
            border: 1px solid #888;
            width: 80%; /* Could be more or less, depending on screen size */
        }
        /* Modal close button */
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

            .close:hover,
            .close:focus {
                color: black;
                text-decoration: none;
                cursor: pointer;
            }
    </style>
</head>
<body>
    <!-- Add TV Show Modal -->
    <div id="addTVShowModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('addTVShowModal')">&times;</span>
            <h2>Add TV Show</h2>
            <input type="text" id="title" placeholder="Title"><br>
            <input type="text" id="genre" placeholder="Genre"><br>
            <input type="text" id="rating" placeholder="Rating"><br>
            <textarea id="description" placeholder="Description"></textarea><br>
            <button onclick="saveTVShow()">Save</button>
        </div>
    </div>

    <!-- Edit TV Show Modal -->
    <div id="editTVShowModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('editTVShowModal')">&times;</span>
            <h2>Edit TV Show</h2>
            <input type="text" id="editTitle" placeholder="Title"><br>
            <input type="text" id="editGenre" placeholder="Genre"><br>
            <input type="text" id="editRating" placeholder="Rating"><br>
            <textarea id="editDescription" placeholder="Description"></textarea><br>
            <button onclick="updateTVShow()">Update</button>
        </div>
    </div>

    <section class="tv-show-list">
        <h2>Bulls TV Show Recommendations</h2>
        <table id="tvShowTable">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Title</th>
                    <th>Genre</th>
                    <th>Rating</th>
                    <th>Description</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <!-- TV show rows will be dynamically added here -->
            </tbody>
        </table>
        <button onclick="openModal('addTVShowModal')">Add TV Show</button>
    </section>

    <section class="tv-show-list">
        <h2>Bulls TV Shows by Genre</h2>
        <canvas id="tvShowGenreChart" width="400" height="200"></canvas>
        <!-- Genre chart will be displayed here -->
    </section>

    <!-- Include Chart.js library -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
        // Sample initial TV show data
        let tvShows = [
            {
                id: 1,
                title: "Bull of Thrones",
                genre: "Fantasy",
                rating: "8/10",
                description: "A bull's epic journey to claim the throne."
            },
            {
                id: 2,
                title: "The Bull Bang Theory",
                genre: "Comedy",
                rating: "10/10",
                description: "A group of brilliant bulls navigating the complexities of modern ranch life."
            },
            {
                id: 3,
                title: "Bull Call Saul",
                genre: "Crime",
                rating: "7/10",
                description: "A bull lawyer's journey into the criminal underworld."
            },
            {
                id: 4,
                title: "Bulls Anatomy",
                genre: "Drama",
                rating: "7/10",
                description: "Life, love, and drama in a bustling cattle ranch hospital."
            },
            {
                id: 5,
                title: "The Walking Bull",
                genre: "Horror",
                rating: "6/10",
                description: "Surviving the apocalypse as a herd of determined bulls."
            }
        ];

        // Function to render TV shows
        function renderTVShows() {
            const tableBody = document.querySelector("#tvShowTable tbody");
            tableBody.innerHTML = "";
            tvShows.forEach((tvShow, index) => {
                const row = `
                            <tr>
                                <td>${index + 1}</td>
                                <td>${tvShow.title}</td>
                                <td>${tvShow.genre}</td>
                                <td>${tvShow.rating}</td>
                                <td>${tvShow.description}</td>
                                <td>
                                    <button onclick="openEditModal(${tvShow.id})">Edit</button>
                                    <button onclick="deleteTVShow(${tvShow.id})">Delete</button>
                                </td>
                            </tr>
                        `;
                tableBody.innerHTML += row;
            });
            updateTVShowGenreChart(); // Update genre chart after rendering TV shows
        }

        // Function to open modal
        function openModal(modalId) {
            const modal = document.getElementById(modalId);
            modal.style.display = "block";
        }

        // Function to close modal
        function closeModal(modalId) {
            const modal = document.getElementById(modalId);
            modal.style.display = "none";
        }

        // Function to open edit modal with pre-filled data
        function openEditModal(tvShowId) {
            const tvShow = tvShows.find(tv => tv.id === tvShowId);
            document.getElementById('editTitle').value = tvShow.title;
            document.getElementById('editGenre').value = tvShow.genre;
            document.getElementById('editRating').value = tvShow.rating;
            document.getElementById('editDescription').value = tvShow.description;
            openModal('editTVShowModal');
        }

        // Function to add a new TV show
        function saveTVShow() {
            const newTVShow = {
                id: tvShows.length + 1,
                title: document.getElementById('title').value,
                genre: document.getElementById('genre').value,
                rating: document.getElementById('rating').value,
                description: document.getElementById('description').value
            };
            tvShows.push(newTVShow);
            closeModal('addTVShowModal');
            renderTVShows();
        }

        // Function to update a TV show
        function updateTVShow() {
            const title = document.getElementById('editTitle').value;
            const genre = document.getElementById('editGenre').value;
            const rating = document.getElementById('editRating').value;
            const description = document.getElementById('editDescription').value;

            const tvShowId = tvShows.findIndex(tvShow => tvShow.title === title);
            if (tvShowId !== -1) {
                tvShows[tvShowId].genre = genre;
                tvShows[tvShowId].rating = rating;
                tvShows[tvShowId].description = description;
                closeModal('editTVShowModal');
                renderTVShows();
            } else {
                alert("TV show not found!");
            }
        }

        // Function to delete a TV show
        function deleteTVShow(tvShowId) {
            const index = tvShows.findIndex(tvShow => tvShow.id === tvShowId);
            if (index !== -1) {
                tvShows.splice(index, 1);
                renderTVShows();
            } else {
                alert("TV show not found!");
            }
        }

        // Function to update the genre chart for TV shows
        function updateTVShowGenreChart() {
            const genres = {};
            tvShows.forEach(tvShow => {
                genres[tvShow.genre] = genres[tvShow.genre] ? genres[tvShow.genre] + 1 : 1;
            });

            const ctx = document.getElementById('tvShowGenreChart').getContext('2d');
            const chart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: Object.keys(genres),
                    datasets: [{
                        label: 'Number of TV Shows',
                        data: Object.values(genres),
                        backgroundColor: 'rgba(54, 162, 235, 0.5)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: true
                            }
                        }]
                    }
                }
            });
        }

        // Initial rendering of TV shows
        renderTVShows();
    </script>
</body>
</html>
